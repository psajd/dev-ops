- name: Configure master node for replication
  block:
    - name: Create replication user
      postgresql_user:
        name: "{{ postgres_replication.replication_user }}"
        password: "{{ postgres_replication.replication_password }}"
        role_attr_flags: "REPLICATION"
      become: true
      become_user: postgres

    - name: Ensure replication settings in postgresql.conf
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: "^wal_level", line: "wal_level = '{{ postgres_replication.wal_level }}'" }

  when: inventory_hostname == postgres_nodes.master

- name: Configure replica nodes for replication
  block:
    - name: Stop PostgreSQL
      service:
        name: postgresql
        state: stopped

    - name: Remove existing data directory if not empty
      command:
        cmd: rm -rf "{{ postgres_data_dir }}"
      when: postgres_data_dir is not none and postgres_data_dir != ""

    - name: Recreate data directory
      file:
        path: "{{ postgres_data_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: 0700

    - name: Sync data from master
      command: >
        pg_basebackup -h {{ hostvars[postgres_nodes.master]['ansible_host'] }}
        -D {{ postgres_data_dir }}
        -U {{ postgres_replication.replication_user }}
        -Fp -Xs -P
      become_user: postgres

    - name: Create standby.signal file
      file:
        path: "{{ postgres_data_dir }}/standby.signal"
        state: touch
        owner: postgres
        group: postgres
        mode: 0600

    - name: Add replication settings to postgresql.conf
      blockinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        block: |
          primary_conninfo = 'host={{ hostvars[postgres_nodes.master]['ansible_host'] }} port={{ postgres_port }} user={{ postgres_replication.replication_user }} password={{ postgres_replication.replication_password }}'
          restore_command = 'cp {{ postgres_data_dir }}/archive/%f %p'
          recovery_target_timeline = 'latest'
      notify: Restart PostgreSQL

  when: inventory_hostname in postgres_nodes.replicas